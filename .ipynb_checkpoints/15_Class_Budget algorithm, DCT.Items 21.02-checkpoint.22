{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a650171",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Класс, имитирующий работу программы отслеживания бюджета\n",
    "# Сам объект представляет из себя \"кощелек\" - в нем хранится число, обозначающее нашу нынешнюю сумму\n",
    "# Методы:\n",
    "# - Потратить\n",
    "# - Пополнить\n",
    "# - Показать:\n",
    "# -- Остаток\n",
    "# -- Расходы\n",
    "# -- Доходы\n",
    "# -- (по периодам)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ef572cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# { ('21', '02', '22'): { '0': {'summa' : ..., 'categoria': ..., 'agent': ...},\n",
    "#                   '1': {'summa' : ..., 'categoria': ..., 'agent': ...} },\n",
    "#   ('22', '02', '22'): { '0': {'summa' : ..., 'categoria': ..., 'agent': ...},\n",
    "#                   '1': {'summa' : ..., 'categoria': ..., 'agent': ...},\n",
    "#                   '2': {'summa' : ..., 'categoria': ..., 'agent': ...},\n",
    "#                   '3': {'summa' : ..., 'categoria': ..., 'agent': ...} } }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dcf734bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# defaultdict (module collection) - this method allows you to check do you have requered key or not. If you don't have then this methode offers you key by default\n",
    "\n",
    "class BudgetSaver:\n",
    "    \n",
    "    def __init__(self, budget=0):# we create example \"budget\" for methode init\n",
    "        self.budget = budget # if we made busget as self.budget then it becomes accessable for all methodes\n",
    "        self.dct = {}\n",
    "    \n",
    "    def flow(self, summa, categoria, agent, date): # date: '21.02.22'\n",
    "        self.budget += summa\n",
    "        tuple_date = tuple(date.split('.')) #Split is used for STR and return data in massive. We turn it in touple (cortage)\n",
    "        if tuple_date not in self.dct.keys():# if this date is available in keys of dct - self.dct\n",
    "         \n",
    "         # if date doesn't exists among keys then dictionary is empty\n",
    "       \n",
    "        self.dct[tuple_date] = {}\n",
    "       \n",
    "        # if date exists among keys then we check operations for this date\n",
    "        # we need create keys in kind of operations\n",
    "        # when we apply to dictionary by key like self.dct[tuple_date] we recieve value. \n",
    "        # what value contains in this case - new internal dictionary with own keys. \n",
    "        # If we apply to dictionary by key and by index - we recieve key of internal dictionary self.dct[tuple_date][str(len(self.dct[tuple_date]))\n",
    "        # [str(len(self.dct[tuple_date]))] - is index for keys of internal dictionary. We turn index in str.  \n",
    "        # assign other new keys to each key of internal dictionary\n",
    "        \n",
    "        self.dct[tuple_date][str(len(self.dct[tuple_date]))] = { \n",
    "            'summa': summa,\n",
    "            'categoria': categoria,\n",
    "            'agent': agent\n",
    "        }\n",
    "    \n",
    "    def show(self, period='all'):   # period='all' means all operations for whole period\n",
    "        if self.dct == {}:          # 1.\n",
    "            print('Операций нет')\n",
    "        elif period == 'all':       # 2.\n",
    "            for date in self.dct:   #3.\n",
    "                print('-'.join(date)) # through \"-\" join touple of dates which are in str. Join works only with str.\n",
    "                print()\n",
    "                for transaction in self.dct[date]: #4. self.dct[date] - we call internal massive where \"transaction\" is runung by key (operations index) of internal massive\n",
    "                    operation = self.dct[date][transaction] #5.self.dct[date][transaction]- calls value of last dictionary \n",
    "                    print('Категория:', operation['categoria']) # 6. shows values of key \"catergory\"\n",
    "                    print('Агент:', operation['agent'])         # 7. shows values of key \"agent\"\n",
    "                    print('Сумма:', operation['summa'])         # 8. shows values of key \"sum\"\n",
    "                    print()\n",
    "                print('----------------------')\n",
    "                print()\n",
    "                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f3a19395",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_wallet = BudgetSaver() # assign example \"my_wallet\" to Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0006ffa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Операций нет\n"
     ]
    }
   ],
   "source": [
    "my_wallet.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b24faf00",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_wallet.flow(100, 'Нашел', 'Незнакомец', '20.02.22')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a2f1063d",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_wallet.flow(-100, 'Потерял', 'Я', '21.02.22')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2384bf07",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_wallet.flow(100000, 'Google', 'Сергей Брин', '22.02.22')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f437bf53",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_wallet.flow(-80000, 'Яндекс', 'YandexHR', '23.02.22')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "dac2726a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('20', '02', '22')\n",
      "{'0': {'summa': 100, 'categoria': 'Нашел', 'agent': 'Незнакомец'}}\n",
      "\n",
      "('21', '02', '22')\n",
      "{'0': {'summa': -100, 'categoria': 'Потерял', 'agent': 'Я'}}\n",
      "\n",
      "('22', '02', '22')\n",
      "{'0': {'summa': 100000, 'categoria': 'Google', 'agent': 'Сергей Брин'}}\n",
      "\n",
      "('23', '02', '22')\n",
      "{'0': {'summa': -80000, 'categoria': 'Яндекс', 'agent': 'YandexHR'}}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i, k in my_wallet.dct.items():#.dct.items() - create touples with 2 elements. First (i or date) - keys, second (k or internal dcts)- values.\n",
    "                                  #self.dct = {} was defined in the begining\n",
    "    print(i)\n",
    "    print(k)\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5b84ff08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20-02-22\n",
      "\n",
      "Категория: Нашел\n",
      "Агент: Незнакомец\n",
      "Сумма: 100\n",
      "\n",
      "----------------------\n",
      "\n",
      "21-02-22\n",
      "\n",
      "Категория: Потерял\n",
      "Агент: Я\n",
      "Сумма: -100\n",
      "\n",
      "----------------------\n",
      "\n",
      "22-02-22\n",
      "\n",
      "Категория: Google\n",
      "Агент: Сергей Брин\n",
      "Сумма: 100000\n",
      "\n",
      "----------------------\n",
      "\n",
      "23-02-22\n",
      "\n",
      "Категория: Яндекс\n",
      "Агент: YandexHR\n",
      "Сумма: -80000\n",
      "\n",
      "----------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "my_wallet.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bb132b3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_wallet.flow(-300, 'Fastfood', 'Starbaks', '21.02.22')\n",
    "my_wallet.flow(500, 'Fastfood', 'Qwerty', '23.02.22')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4d64456e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('20',\n",
       "  '02',\n",
       "  '22'): {'0': {'summa': 100, 'categoria': 'Нашел', 'agent': 'Незнакомец'}},\n",
       " ('21',\n",
       "  '02',\n",
       "  '22'): {'0': {'summa': -100, 'categoria': 'Потерял', 'agent': 'Я'},\n",
       "  '1': {'summa': -300, 'categoria': 'Fastfood', 'agent': 'Starbaks'}},\n",
       " ('22',\n",
       "  '02',\n",
       "  '22'): {'0': {'summa': 100000,\n",
       "   'categoria': 'Google',\n",
       "   'agent': 'Сергей Брин'}},\n",
       " ('23',\n",
       "  '02',\n",
       "  '22'): {'0': {'summa': -80000,\n",
       "   'categoria': 'Яндекс',\n",
       "   'agent': 'YandexHR'}, '1': {'summa': 500,\n",
       "   'categoria': 'Fastfood',\n",
       "   'agent': 'Qwerty'}}}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_wallet.dct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bc04df21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20-02-22\n",
      "\n",
      "Категория: Нашел\n",
      "Агент: Незнакомец\n",
      "Сумма: 100\n",
      "\n",
      "----------------------\n",
      "\n",
      "21-02-22\n",
      "\n",
      "Категория: Потерял\n",
      "Агент: Я\n",
      "Сумма: -100\n",
      "\n",
      "Категория: Fastfood\n",
      "Агент: Starbaks\n",
      "Сумма: -300\n",
      "\n",
      "----------------------\n",
      "\n",
      "22-02-22\n",
      "\n",
      "Категория: Google\n",
      "Агент: Сергей Брин\n",
      "Сумма: 100000\n",
      "\n",
      "----------------------\n",
      "\n",
      "23-02-22\n",
      "\n",
      "Категория: Яндекс\n",
      "Агент: YandexHR\n",
      "Сумма: -80000\n",
      "\n",
      "Категория: Fastfood\n",
      "Агент: Qwerty\n",
      "Сумма: 500\n",
      "\n",
      "----------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "my_wallet.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d34686f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(('20', '02', '22'),\n",
       "  {'0': {'summa': 100, 'categoria': 'Нашел', 'agent': 'Незнакомец'}}),\n",
       " (('21', '02', '22'),\n",
       "  {'0': {'summa': -100, 'categoria': 'Потерял', 'agent': 'Я'}}),\n",
       " (('22', '02', '22'),\n",
       "  {'0': {'summa': 100000, 'categoria': 'Google', 'agent': 'Сергей Брин'}}),\n",
       " (('23', '02', '22'),\n",
       "  {'0': {'summa': -80000, 'categoria': 'Яндекс', 'agent': 'YandexHR'}})]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(my_wallet.dct.items())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fc13fba8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 - 2\n",
      "3 - 4\n",
      "5 - 6\n"
     ]
    }
   ],
   "source": [
    "a = [ [1, 2], [3, 4], [5, 6] ]\n",
    "\n",
    "for i, k in a:\n",
    "    print(i, '-', k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d23cf1c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6baa152",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3b9e492a",
   "metadata": {},
   "source": [
    "# defaultdict (module collections)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2fb9a52c",
   "metadata": {},
   "outputs": [],
   "source": [
    "class test:\n",
    "    \n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "    \n",
    "    def func1(self):\n",
    "        print(self)\n",
    "    \n",
    "    def func2():\n",
    "        print(10)\n",
    "    \n",
    "    def show_name(self):\n",
    "        print(self.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "fb0b9e18",
   "metadata": {},
   "outputs": [],
   "source": [
    "q = test('qqq')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "3b43677d",
   "metadata": {},
   "outputs": [],
   "source": [
    "w = test('www')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "10bb4b28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'qqq'"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "5478f40f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'www'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "bb4f802d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "www\n"
     ]
    }
   ],
   "source": [
    "test.show_name(w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "4415385f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'qqq'"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "42102fe5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.test object at 0x0000024D56BD8F40>\n"
     ]
    }
   ],
   "source": [
    "q.func1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "91d6d385",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "func2() takes 0 positional arguments but 1 was given",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-49-ac56b7bef1d4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mq\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfunc2\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: func2() takes 0 positional arguments but 1 was given"
     ]
    }
   ],
   "source": [
    "q.func2()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "18f90aa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "test.func2()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "0f4dedef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<__main__.test at 0x24d56bd8f40>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42b07bfd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
